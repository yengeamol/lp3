public class NqueenBacktracking {
	 
    static boolean isSafe(int[] board, int row, int col) {
        for (int i = 0; i < row; i++) {
            if (board[i] == col || Math.abs(board[i] - col) == row - i) {
                return false;
            }
        }
        return true;
    }


    static boolean solveNQueens(int[] board, int row) {
        if (row == board.length) return true;  // All queens are placed

        for (int col = 0; col < board.length; col++) {
            if (isSafe(board, row, col)) {
                board[row] = col;  // Place queen
                if (solveNQueens(board, row + 1)) return true;  // Recur for next row
                board[row] = -1;  // Backtrack
            }
        }
        return false; 
    }

    // Function to print the solution board
    static void printBoard(int[] board) {
        for (int row = 0; row < board.length; row++) {
            for (int col = 0; col < board.length; col++) {
                if (board[row] == col) System.out.print("Q ");
                else System.out.print(". ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int n = 4;  // Example size
        int[] board = new int[n];  // Board to store queen's column position for each row
        for (int i = 0; i < n; i++) board[i] = -1;  // Initialize all positions to -1

        if (solveNQueens(board, 0)) {
            printBoard(board);
        } else {
            System.out.println("No solution");
        }
    }
}
