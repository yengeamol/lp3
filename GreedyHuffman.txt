import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

class Node {
    char character;
    int frequency;
    Node left, right;

    public Node(char character, int frequency) {
        this.character = character;
        this.frequency = frequency;
        this.left = null;
        this.right = null;
    }
}

public class Greedy {
	 public static Node buildHuffmanTree(Map<Character, Integer> freqMap) {
	        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(n -> n.frequency));
	        for (Map.Entry<Character, Integer> entry : freqMap.entrySet()) {
	            pq.add(new Node(entry.getKey(), entry.getValue()));
	        }

	        while (pq.size() > 1) {
	            Node left = pq.poll();
	            Node right = pq.poll();
	            Node internalNode = new Node('\0', left.frequency + right.frequency);
	            internalNode.left = left;
	            internalNode.right = right;
	            pq.add(internalNode);
	        }

	        return pq.poll();
	    }

	    public static void generateHuffmanCodes(Node root, String code, Map<Character, String> codes) {
	        if (root == null) return;
	        if (root.character != '\0') {
	            codes.put(root.character, code);
	        }
	        generateHuffmanCodes(root.left, code + "0", codes);
	        generateHuffmanCodes(root.right, code + "1", codes);
	    }

	    public static void main(String[] args) {
	        String input = "abac";
	        Map<Character, Integer> freqMap = new HashMap<>();
	        
	        // Build frequency map
	        for (char c : input.toCharArray()) {
	            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);
	        }

	        // Build Huffman Tree
	        Node root = buildHuffmanTree(freqMap);

	        // Generate Huffman codes
	        Map<Character, String> huffmanCodes = new HashMap<>();
	        generateHuffmanCodes(root, "", huffmanCodes);

	        // Print the codes
	        System.out.println("Huffman Codes:");
	        for (Map.Entry<Character, String> entry : huffmanCodes.entrySet()) {
	            System.out.println(entry.getKey() + ": " + entry.getValue());
	        }

	        // Encode the input string
	        StringBuilder encoded = new StringBuilder();
	        for (char c : input.toCharArray()) {
	            encoded.append(huffmanCodes.get(c));
	        }

	        System.out.println("Encoded String: " + encoded.toString());
	    }
}